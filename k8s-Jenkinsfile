pipeline {
  
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins-job-name: ${JOB_NAME}
spec:
  containers:
  - name: maven
    image: maven:alpine
    command:
    - cat
    tty: true
    volumeMounts:
    - name: mvnrepository
      mountPath: /root/.m2/repository
      subPath: .m2
  - name: docker
    image: docker
    command: ['cat']
    tty: true
    volumeMounts:
    - name: dockersock
      mountPath: /var/run/docker.sock
  - name: google
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    command: ['cat']
    tty: true
  volumes:
  - name: dockersock
    hostPath:
      path: /var/run/docker.sock
  - name: mvnrepository
    persistentVolumeClaim:
      claimName: jenkins-jenkins-home

"""
    }
  }
  environment {
        PROJECT_ID = "us-con-gcp-npr-0000266-072920"
        CLUSTER_NAME = "pocep-demo"
        LOCATION = "us-east1-b"
        CREDENTIALS_ID=credentials('gcp_key')

    }
  parameters {
    string(name: 'version', defaultValue: '0.1', description: 'Version override appended to maven version number')
  } 
 stages {
    /* stage('Build') {
      steps {
        container('maven') {
          sh 'mvn clean package --no-transfer-progress --batch-mode -DskipTests=true'
        }
      }
    }

    stage('Build docker images') {
      environment {
        nexus_docker_repo = 'docker.ingress.ddop.dcpgreendot.com'
        dcp_demo_app_tag = 'petclinic'
        PETCLINIC_VERSION = sh (
            script: 'xf=`ls target/*.jar` && echo $xf | awk \'{print substr($1,1,match($1,/.[^.]*$/)-1)}\' | awk \'{print substr($1,match($1,/[0-9]/))}\'', 
            returnStdout: true
          ).trim()
        PETCLINIC_VERSION_CUSTOM = "${PETCLINIC_VERSION}${params.version}"
      }
      steps {      
        withCredentials([usernamePassword(credentialsId: 'NexusID', usernameVariable: 'nexus_docker_repo_user', passwordVariable: 'nexus_docker_repo_password')]){
          container('docker') {
            sh '''
              echo "Publish Docker Image to Nexus"
              docker login -u ${nexus_docker_repo_user} -p ${nexus_docker_repo_password} ${nexus_docker_repo}
              docker build -t ${nexus_docker_repo}/${dcp_demo_app_tag}:${PETCLINIC_VERSION_CUSTOM} -f Dockerfile .
              docker push ${nexus_docker_repo}/${dcp_demo_app_tag}:${PETCLINIC_VERSION_CUSTOM}
            '''
          
          }
        }
      }
    } 
    */
    stage ('Authenticating and deploy') {
         steps {
           container('google') {
               sh("gcloud auth activate-service-account --key-file=${CREDENTIALS_ID}")
               //sh('gcloud components install kubectl')
               sh('gcloud container clusters get-credentials ${CLUSTER_NAME} --region ${LOCATION} --project ${PROJECT_ID}')
               sh'''
               kubectl create secret -n test docker-registry gcr-json-key \
                --docker-server=gcr.io \
                --docker-username=_json_key \
                --docker-password="${dockerKey}" \
                --docker-email=pocep-demo@us-con-gcp-npr-0000266-072920.iam.gserviceaccount.com
                '''
               //sh('gcloud auth configure-docker')
               sh('kubectl get nodes')
               sh('kubectl apply -f test.yaml')
             
           }
           
         }
       }
    //stage('Deploy to GKE') {
            //steps{
            //      step([$class: 'KubernetesEngineBuilder', projectId: env.PROJECT_ID, clusterName: env.CLUSTER_NAME, location: env.LOCATION, manifestPattern: 'deployment.yaml', credentialsId: ${CREDENTIALS_ID} , verifyDeployments: true])
            //}
        //}
  }
}